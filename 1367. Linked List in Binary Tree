/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    boolean result = false;
    public boolean isSubPath(ListNode head, TreeNode root) {
        dfs(head,root);
        return result;
    }
    void dfs(ListNode head, TreeNode root) {
        
        if(root==null||result==true) return;
        
        if(isSubPathFromRoot(head, root)) {
            result=true;
            return;
        }
        
        dfs(head, root.left);
        dfs(head, root.right);
        
    }
    
    boolean isSubPathFromRoot(ListNode head, TreeNode root) {
        if(head==null) {
            return true;
        }
        else if(root==null){
            return false;
        }
        if(head.val!=root.val) return false;
        if(isSubPathFromRoot(head.next, root.left)) return true;
        else if(isSubPathFromRoot(head.next, root.right)) return true;
        return false;
    }
}
